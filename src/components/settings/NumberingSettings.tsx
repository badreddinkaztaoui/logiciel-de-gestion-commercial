import React, { useState, useEffect } from 'react';
import { Hash, RotateCw, AlertCircle, Save } from 'lucide-react';
import { NumberingSettings as INumberingSettings, settingsService } from '../../services/settingsService';
import { documentNumberingService } from '../../services/documentNumberingService';
import { toast } from 'react-hot-toast';

interface NumberingSettingsProps {
  settings: INumberingSettings;
  onUpdate: (settings: Partial<INumberingSettings>) => void;
}

const NumberingSettings: React.FC<NumberingSettingsProps> = ({ settings, onUpdate }) => {
  const [localSettings, setLocalSettings] = useState<INumberingSettings>(settings);
  const [hasChanges, setHasChanges] = useState(false);
  const [selectedYear, setSelectedYear] = useState<number>(new Date().getFullYear());

  useEffect(() => {
    setLocalSettings(settings);
  }, [settings]);

  const formatDocumentNumber = (type: keyof INumberingSettings, number: number) => {
    const paddedNumber = number.toString().padStart(4, '0');
    switch (type) {
      case 'SALES_JOURNAL':
        return `F G${selectedYear}${paddedNumber}`;
      case 'INVOICE':
        return `F A${selectedYear}${paddedNumber}`;
      case 'QUOTE':
        return `F D${selectedYear}${paddedNumber}`;
      case 'DELIVERY':
        return `F L${selectedYear}${paddedNumber}`;
      case 'RETURN':
        return `F R${selectedYear}${paddedNumber}`;
      case 'PURCHASE_ORDER':
        return `F PO${selectedYear}${paddedNumber}`;
      default:
        return `DOC-${paddedNumber}`;
    }
  };

  const handleStartNumberChange = (type: keyof INumberingSettings, value: string) => {
    const cleanValue = value.replace(/\D/g, '');
    const numValue = Math.max(1, parseInt(cleanValue) || 1);

    setLocalSettings(prev => ({
      ...prev,
      [type]: {
        ...prev[type],
        startNumber: numValue,
        currentNumber: numValue
      }
    }));
    setHasChanges(true);
  };

  const handleFieldChange = (type: keyof INumberingSettings, field: string, value: any) => {
    setLocalSettings(prev => ({
      ...prev,
      [type]: {
        ...prev[type],
        [field]: value
      }
    }));
    setHasChanges(true);
  };

  const handleSave = async () => {
    if (hasChanges) {
      try {
        await settingsService.updateNumberingSettings(localSettings);
        onUpdate(localSettings);
        setHasChanges(false);
        toast.success('Param√®tres de num√©rotation enregistr√©s avec succ√®s');
      } catch (error) {
        console.error('Error saving numbering settings:', error);
        toast.error('Erreur lors de l\'enregistrement des param√®tres');
      }
    }
  };

  const handleReset = async (type: keyof INumberingSettings) => {
    const docTypeLabel = {
      'SALES_JOURNAL': 'le journal de vente',
      'INVOICE': 'les factures',
      'QUOTE': 'les devis',
      'DELIVERY': 'les bons de livraison',
      'RETURN': 'les bons de retour',
      'PURCHASE_ORDER': 'les bons de commande'
    }[type] || type;

    if (window.confirm(`R√©initialiser la num√©rotation pour ${docTypeLabel} ? Cette action supprimera tous les num√©ros existants pour cette ann√©e et red√©marrera √† partir du num√©ro de d√©part configur√©.`)) {
      try {
        toast.loading(`R√©initialisation de la num√©rotation pour ${docTypeLabel}...`);

        // Reset the numbering using the document numbering service
        await documentNumberingService.resetNumbering(type);

        // Reload the settings from the database to get the updated values
        const updatedSettings = await settingsService.getNumberingSettings();
        setLocalSettings(updatedSettings);
        onUpdate(updatedSettings);
        setHasChanges(false);

        toast.dismiss();
        toast.success(`Num√©rotation r√©initialis√©e pour ${docTypeLabel}. Le prochain num√©ro sera ${getPreviewNumber(type)}.`);
      } catch (error) {
        console.error('Error resetting numbering:', error);
        toast.dismiss();

        let errorMessage = 'Erreur lors de la r√©initialisation de la num√©rotation';

        if (error instanceof Error) {
          if (error.message.includes('Failed to reset')) {
            errorMessage = '√âchec de la r√©initialisation. V√©rifiez vos permissions de base de donn√©es.';
          } else if (error.message.includes('duplicate')) {
            errorMessage = 'Conflit de num√©rotation d√©tect√©. Veuillez r√©essayer.';
          } else {
            errorMessage = `Erreur: ${error.message}`;
          }
        }

        toast.error(errorMessage);
      }
    }
  };

  const getPreviewNumber = (type: keyof INumberingSettings) => {
    const docSettings = localSettings[type];
    const nextNumber = Math.max(docSettings.currentNumber, docSettings.startNumber);
    return formatDocumentNumber(type, nextNumber);
  };

  const getCurrentStatus = (type: keyof INumberingSettings) => {
    const docSettings = localSettings[type];
    const nextNumber = Math.max(docSettings.currentNumber, docSettings.startNumber);

    return {
      startNumber: docSettings.startNumber,
      currentNumber: docSettings.currentNumber,
      nextNumber,
      isValid: docSettings.currentNumber >= docSettings.startNumber
    };
  };

  const currentYear = new Date().getFullYear();
  const yearOptions = Array.from({ length: 11 }, (_, i) => currentYear - 5 + i);

  const documentTypes = [
    { key: 'QUOTE' as const, label: 'Devis', icon: 'üìã', color: 'purple' },
    { key: 'INVOICE' as const, label: 'Factures', icon: 'üìÑ', color: 'blue' },
    { key: 'SALES_JOURNAL' as const, label: 'Journal de vente', icon: 'üìä', color: 'indigo' },
    { key: 'DELIVERY' as const, label: 'Bons de livraison', icon: 'üöö', color: 'green' },
    { key: 'RETURN' as const, label: 'Bons de retour', icon: '‚Ü©Ô∏è', color: 'orange' },
    { key: 'PURCHASE_ORDER' as const, label: 'Bons de commande', icon: 'üõí', color: 'red' }
  ];

  const handleDebugNumbering = async () => {
    try {
      toast.loading('Diagnostic complet du syst√®me de num√©rotation...');

      // Run comprehensive diagnostics
      const issues = await documentNumberingService.diagnoseProblem();

      // Validate the numbering system
      await documentNumberingService.validateNumberingSystem();

      // Get the status for debugging
      const status = await documentNumberingService.getNumberingStatus();

      toast.dismiss();

      // Display results
      console.group('üîç Diagnostic du syst√®me de num√©rotation');
      console.log('üìä √âtat actuel du syst√®me:', status);
      console.log('üö® Probl√®mes d√©tect√©s:');
      issues.forEach(issue => console.log(issue));
      console.groupEnd();

      const hasErrors = issues.some(issue => issue.includes('‚ùå'));
      const hasWarnings = issues.some(issue => issue.includes('‚ö†Ô∏è'));

      if (hasErrors) {
        toast.error(`Erreurs d√©tect√©es dans le syst√®me de num√©rotation. Consultez la console pour plus de d√©tails.`);
      } else if (hasWarnings) {
        toast.success(`Syst√®me op√©rationnel avec quelques avertissements. Consultez la console pour plus de d√©tails.`);
      } else {
        toast.success('Syst√®me de num√©rotation parfaitement op√©rationnel ! ‚úÖ');
      }

      // Show a summary in the UI
      const errorCount = issues.filter(issue => issue.includes('‚ùå')).length;
      const warningCount = issues.filter(issue => issue.includes('‚ö†Ô∏è')).length;
      const successCount = issues.filter(issue => issue.includes('‚úÖ')).length;

      if (errorCount > 0 || warningCount > 0) {
        setTimeout(() => {
          alert(`R√©sum√© du diagnostic:\n\n‚úÖ Succ√®s: ${successCount}\n‚ö†Ô∏è Avertissements: ${warningCount}\n‚ùå Erreurs: ${errorCount}\n\nConsultez la console (F12) pour plus de d√©tails.`);
        }, 1000);
      }

    } catch (error) {
      console.error('Error during numbering diagnosis:', error);
      toast.dismiss();
      toast.error('Erreur lors du diagnostic du syst√®me de num√©rotation');
    }
  };

  const handleRepairNumbering = async () => {
    if (window.confirm('R√©parer le syst√®me de num√©rotation ? Cette op√©ration va nettoyer les doublons et corriger les incoh√©rences.')) {
      try {
        toast.loading('R√©paration du syst√®me de num√©rotation en cours...');

        // Run the repair operation
        await documentNumberingService.repairNumberingSystem();

        toast.dismiss();
        toast.success('Syst√®me de num√©rotation r√©par√© avec succ√®s ! üîß');

        // Refresh the diagnostic to show the results
        setTimeout(() => {
          handleDebugNumbering();
        }, 1000);

      } catch (error) {
        console.error('Error during numbering repair:', error);
        toast.dismiss();
        toast.error('Erreur lors de la r√©paration du syst√®me de num√©rotation');
      }
    }
  };

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 flex-1 mr-4">
          <div className="flex items-start space-x-3">
            <Hash className="w-5 h-5 text-blue-500 mt-0.5" />
            <div>
              <h4 className="font-medium text-blue-900">Configuration de la num√©rotation</h4>
              <p className="text-sm text-blue-700 mt-1">
                Configurez le format de num√©rotation pour chaque type de document.
                La num√©rotation est g√©r√©e automatiquement et garantit des num√©ros uniques.
              </p>
            </div>
          </div>
        </div>
        <div className="flex space-x-2">
          <button
            onClick={handleRepairNumbering}
            className="px-4 py-2 bg-yellow-100 text-yellow-700 rounded-lg hover:bg-yellow-200 flex items-center space-x-2"
            title="R√©parer le syst√®me de num√©rotation"
          >
            <RotateCw className="w-4 h-4" />
            <span>R√©parer</span>
          </button>
          <button
            onClick={handleDebugNumbering}
            className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2"
            title="V√©rifier le syst√®me de num√©rotation"
          >
            <AlertCircle className="w-4 h-4" />
            <span>V√©rifier</span>
          </button>
          <button
            onClick={handleSave}
            disabled={!hasChanges}
            className={`px-4 py-2 rounded-lg flex items-center space-x-2 ${
              hasChanges
                ? 'bg-blue-600 text-white hover:bg-blue-700'
                : 'bg-gray-100 text-gray-400 cursor-not-allowed'
            }`}
          >
            <Save className="w-4 h-4" />
            <span>Sauvegarder</span>
          </button>
        </div>
      </div>

      {documentTypes.map((docType) => {
        const docSettings = localSettings[docType.key];
        const previewNumber = getPreviewNumber(docType.key);

        return (
          <div key={docType.key} className="bg-white border border-gray-200 rounded-lg p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <span className="text-2xl">{docType.icon}</span>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">{docType.label}</h3>
                  <p className="text-sm text-gray-600">
                    Prochain num√©ro: <span className="font-mono font-bold text-blue-600">
                      {previewNumber}
                    </span>
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    D√©part: {docSettings.startNumber} | Actuel: {docSettings.currentNumber}
                  </p>
                </div>
              </div>
              <button
                onClick={() => handleReset(docType.key)}
                className="flex items-center space-x-2 px-4 py-2 bg-red-50 text-red-700 rounded-lg hover:bg-red-100 transition-colors"
                title="R√©initialiser la num√©rotation"
              >
                <RotateCw className="w-4 h-4" />
                <span>R√©initialiser</span>
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ann√©e
                </label>
                <select
                  value={selectedYear}
                  onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  {yearOptions.map(year => (
                    <option key={year} value={year}>{year}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Num√©ro de d√©part
                </label>
                <input
                  type="text"
                  value={docSettings.startNumber}
                  onChange={(e) => handleStartNumberChange(docType.key, e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="1"
                  min="1"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  P√©riode de r√©initialisation
                </label>
                <select
                  value={docSettings.resetPeriod}
                  onChange={(e) => handleFieldChange(docType.key, 'resetPeriod', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="never">Jamais</option>
                  <option value="yearly">Annuelle</option>
                  <option value="monthly">Mensuelle</option>
                </select>
              </div>
            </div>

            <div className="mt-6 bg-gray-50 rounded-lg p-4">
              <h4 className="font-medium text-gray-900 mb-3">Aper√ßu du format</h4>
              <div className="flex items-center justify-center">
                <div className="bg-white border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <span className="text-3xl font-mono font-bold text-blue-600">
                    {previewNumber}
                  </span>
                  <p className="text-sm text-gray-500 mt-2">Prochain num√©ro</p>
                </div>
              </div>
            </div>
          </div>
        );
      })}

      <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
        <div className="flex items-start space-x-3">
          <AlertCircle className="w-5 h-5 text-orange-500 mt-0.5" />
          <div>
            <h4 className="font-medium text-orange-900">Important</h4>
            <ul className="text-sm text-orange-700 mt-1 space-y-1">
              <li>‚Ä¢ La num√©rotation est g√©r√©e automatiquement pour garantir des num√©ros uniques</li>
              <li>‚Ä¢ La remise √† z√©ro utilise le "Num√©ro de d√©part" configur√©</li>
              <li>‚Ä¢ La r√©initialisation se fait automatiquement selon la p√©riode choisie</li>
              <li>‚Ä¢ Chaque type de document a sa propre s√©quence ind√©pendante</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NumberingSettings;